// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertyExchange.Infrastructure.Data.Common;

#nullable disable

namespace PropertyExchange.Infrastructure.Data.Migrations
{
    [DbContext(typeof(PEDbContext))]
    partial class PEDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.Property.PropertyTradeRecordsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentAvailableNumberOfTokens")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentTokenPrice")
                        .HasColumnType("decimal(,2)");

                    b.Property<int>("CurrentTotalNumberOfTokens")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentTotalTokensValuation")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("tbl_pe_PropertyTradeRecords", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserFundDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddOrWithdraw")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("ModeOfTxn")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("TxnAmount")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("TxnDateTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TxnNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserEmail", "UserPhoneNumber");

                    b.ToTable("tbl_pe_UserFundDetails", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserHoldingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PropertyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.HasIndex("UserEmail", "UserPhoneNumber");

                    b.ToTable("tbl_pe_UserPortfolio", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserLoginModel", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginDateTime")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserEmail", "UserPhoneNumber", "LoginDateTime");

                    b.ToTable("tbl_pe_UserLogin", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserModel", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("AvailableMoneyForInvesting")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("DOB")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("IncomeRange")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("SecondaryPhoneNumber")
                        .HasColumnType("longtext");

                    b.HasKey("UserEmail", "UserPhoneNumber");

                    b.ToTable("tbl_pe_UserDetails", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserPassbookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsCurrentHolding")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderDateTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalTxnValue")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("TxnNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TxnType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserPhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.HasIndex("UserEmail", "UserPhoneNumber");

                    b.ToTable("tbl_pe_UserPassbook", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserRegistrationLoginModel", b =>
                {
                    b.Property<string>("UserEmail")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserPhoneNumber")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserPassword")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserEmail", "UserPhoneNumber");

                    b.ToTable("tbl_pe_UserRegistration", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyAddressDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("longtext");

                    b.Property<string>("AddressLine3")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Landmark")
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<int>("PINCode")
                        .HasColumnType("int");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID")
                        .IsUnique();

                    b.ToTable("tbl_pe_PropertyAddressDetails", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyExpensesBreakOutModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("ExpenseIncurredOnDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExpenseMonth")
                        .HasColumnType("int");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExpenseYear")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("tbl_pe_PropertyExpensesBreakOut", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyIncomeBreakOutModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("IncomeAmount")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("IncomeGeneratedOnDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IncomeMonth")
                        .HasColumnType("int");

                    b.Property<string>("IncomeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IncomeYear")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("tbl_pe_PropertyIncomeBreakOut", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyModel", b =>
                {
                    b.Property<string>("PropertyID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CurrentAvailableNumberOfTokens")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentTokenPrice")
                        .HasColumnType("decimal(,2)");

                    b.Property<int>("CurrentTotalNumberOfTokens")
                        .HasColumnType("int");

                    b.Property<int>("CurrentTotalTokensValuation")
                        .HasColumnType("int");

                    b.Property<decimal>("CurrentTotalValuation")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HoldingType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("InitialAvailableNumberOfTokens")
                        .HasColumnType("int");

                    b.Property<decimal>("InitialTokenPrice")
                        .HasColumnType("decimal(,2)");

                    b.Property<int>("InitialTotalNumberOfTokens")
                        .HasColumnType("int");

                    b.Property<int>("InitialTotalTokensValuation")
                        .HasColumnType("int");

                    b.Property<decimal>("InitialTotalValuation")
                        .HasColumnType("decimal(,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAvailableForInvesting")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("OverallAreaInSft")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("PropertyID");

                    b.ToTable("tbl_pe_Property", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyPassbookModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("OrderDateTime")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalTxnValue")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("TxnNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TxnType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("tbl_pe_PropertyPassbook", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyProjectedValuationMetricsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerSft")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("TotalSft")
                        .HasColumnType("decimal(,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("tbl_pe_PropertyProjectedValuationMetrics", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyPurchaseOrSaleExpensesBreakOutModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("ExpenseIncurredOnDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExpenseMonth")
                        .HasColumnType("int");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExpenseYear")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PurchaseOrSale")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("tbl_pe_PropertyPurchaseOrSaleExpensesBreakOut", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyValuationMetricsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal>("PricePerSft")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("TotalSft")
                        .HasColumnType("decimal(,2)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.ToTable("tbl_pe_PropertyValuationMetrics", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Tenant.TenantLeaseDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("EscalationInPercentage")
                        .HasColumnType("decimal(,2)");

                    b.Property<int>("EscalationTenure")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<decimal>("LeaseAdvanceAmount")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("LeaseEndDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LeaseStartDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LeaseTenureInMonths")
                        .HasColumnType("int");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext");

                    b.Property<decimal>("RentPerSft")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("TenantID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("TotalAreaInSft")
                        .HasColumnType("decimal(,2)");

                    b.HasKey("Id");

                    b.HasIndex("TenantID");

                    b.ToTable("tbl_pe_TenantLeaseDetails", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Tenant.TenantModel", b =>
                {
                    b.Property<string>("TenantID")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TenancyType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("TenantID");

                    b.HasIndex("PropertyID");

                    b.ToTable("tbl_pe_Tenant", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Tenant.TenantRentPaymentDetailsModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("ExpenseAmount")
                        .HasColumnType("decimal(,2)");

                    b.Property<string>("ExpenseIncurredOnDate")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExpenseMonth")
                        .HasColumnType("int");

                    b.Property<string>("ExpenseType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ExpenseYear")
                        .HasColumnType("int");

                    b.Property<string>("LastUpdatedDate")
                        .HasColumnType("longtext");

                    b.Property<string>("PropertyID")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("longtext");

                    b.Property<string>("TenantID")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("TenantID");

                    b.ToTable("tbl_pe_TenantRentPaymentDetails", (string)null);
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.Property.PropertyTradeRecordsModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("TradeRecords")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserFundDetailsModel", b =>
                {
                    b.HasOne("PropertyExchange.Core.Domain.Models.User.UserModel", "UserDetails")
                        .WithMany("UserFundDetails")
                        .HasForeignKey("UserEmail", "UserPhoneNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserHoldingModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("UserHolding")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropertyExchange.Core.Domain.Models.User.UserModel", "UserDetails")
                        .WithMany("UserPortfolio")
                        .HasForeignKey("UserEmail", "UserPhoneNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserModel", b =>
                {
                    b.HasOne("PropertyExchange.Core.Domain.Models.User.UserRegistrationLoginModel", "User")
                        .WithOne("UserDetails")
                        .HasForeignKey("PropertyExchange.Core.Domain.Models.User.UserModel", "UserEmail", "UserPhoneNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserPassbookModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("UserPassbook")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PropertyExchange.Core.Domain.Models.User.UserModel", "UserDetails")
                        .WithMany("UserPassbook")
                        .HasForeignKey("UserEmail", "UserPhoneNumber")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");

                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyAddressDetailsModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithOne("AddressDetails")
                        .HasForeignKey("PropertyExchange.Presentation.API.Models.Property.PropertyAddressDetailsModel", "PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyExpensesBreakOutModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("ExpensesBreakOut")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyIncomeBreakOutModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("IncomeBreakOut")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyPassbookModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("Passbook")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyProjectedValuationMetricsModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("ProjectedValuationMetrics")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyPurchaseOrSaleExpensesBreakOutModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("PurchaseOrSaleExpensesBreakOut")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyValuationMetricsModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("ValuationMetrics")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Tenant.TenantLeaseDetailsModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Tenant.TenantModel", "Tenant")
                        .WithMany("LeaseDetails")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Tenant.TenantModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Property.PropertyModel", "Property")
                        .WithMany("TenantDetails")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Property");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Tenant.TenantRentPaymentDetailsModel", b =>
                {
                    b.HasOne("PropertyExchange.Presentation.API.Models.Tenant.TenantModel", "Tenant")
                        .WithMany("RentPaymentDetails")
                        .HasForeignKey("TenantID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserModel", b =>
                {
                    b.Navigation("UserFundDetails");

                    b.Navigation("UserPassbook");

                    b.Navigation("UserPortfolio");
                });

            modelBuilder.Entity("PropertyExchange.Core.Domain.Models.User.UserRegistrationLoginModel", b =>
                {
                    b.Navigation("UserDetails");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Property.PropertyModel", b =>
                {
                    b.Navigation("AddressDetails")
                        .IsRequired();

                    b.Navigation("ExpensesBreakOut");

                    b.Navigation("IncomeBreakOut");

                    b.Navigation("Passbook");

                    b.Navigation("ProjectedValuationMetrics");

                    b.Navigation("PurchaseOrSaleExpensesBreakOut");

                    b.Navigation("TenantDetails");

                    b.Navigation("TradeRecords");

                    b.Navigation("UserHolding");

                    b.Navigation("UserPassbook");

                    b.Navigation("ValuationMetrics");
                });

            modelBuilder.Entity("PropertyExchange.Presentation.API.Models.Tenant.TenantModel", b =>
                {
                    b.Navigation("LeaseDetails");

                    b.Navigation("RentPaymentDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
